use std::io::{Read, Seek};

pub(crate) mod orcaslicer;
pub(crate) mod prusaslicer;
pub(crate) mod slic3r;
pub(crate) mod superslicer;

use crate::types::AccelerationSettings;
use orcaslicer::OrcaSlicerProcessor as Orca;
use prusaslicer::PrusaSlicerProcessor as PrusaSlicer;
use superslicer::SuperSlicerProcessor as SuperSlicer;

#[enum_dispatch::enum_dispatch]
pub(crate) enum PreProcessorImpl {
    Orca,
    PrusaSlicer,
    SuperSlicer,
}

#[enum_dispatch::enum_dispatch(PreProcessorImpl)]
pub(crate) trait AccelerationPreProcessor {
    fn process<'a>(
        &'a self,
        input: impl Read + Seek + Send + 'a,
        settings: &'a AccelerationSettings,
    ) -> generator::Generator<'a, (), String>;
}

pub(crate) fn identify_slicer_marker(line: &str) -> Option<PreProcessorImpl> {
    let line = line.trim();
    if line.starts_with("; generated by SuperSlicer") {
        tracing::info!("Identified slicer: SuperSlicer");
        Some(SuperSlicer::new().into())
    } else if line.starts_with("; generated by PrusaSlicer") {
        tracing::info!("Identified slicer: PrusaSlicer");
        Some(PrusaSlicer::new().into())
    } else if line.starts_with("; generated by OrcaSlicer") {
        tracing::info!("Identified slicer: OrcaSlicer");
        Some(Orca::new().into())
    } else {
        None
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use crate::types::{AccelerationControl, AccelerationSettings, FeatureType};
    use once_cell::sync::Lazy;
    use std::collections::HashMap;
    use std::path::{Path, PathBuf};

    pub(crate) static GCODE_PATH: Lazy<PathBuf> =
        Lazy::new(|| Path::new(env!("CARGO_MANIFEST_DIR")).join("GCode"));

    pub(crate) static SETTINGS: Lazy<AccelerationSettings> = Lazy::new(|| {
        let mut settings: AccelerationSettings = HashMap::new();
        settings.insert(
            FeatureType::FirstLayer,
            AccelerationControl {
                accel: 2000,
                accel_to_decel: 1000,
                scv: 5,
            },
        );
        settings.insert(
            FeatureType::Travel,
            AccelerationControl {
                accel: 10000,
                accel_to_decel: 10000,
                scv: 8,
            },
        );
        settings.insert(
            FeatureType::ExternalPerimeter,
            AccelerationControl {
                accel: 2000,
                accel_to_decel: 1000,
                scv: 5,
            },
        );
        settings.insert(
            FeatureType::OverhangPerimeter,
            AccelerationControl {
                accel: 2000,
                accel_to_decel: 1000,
                scv: 5,
            },
        );
        settings.insert(
            FeatureType::InternalPerimeter,
            AccelerationControl {
                accel: 2500,
                accel_to_decel: 1750,
                scv: 5,
            },
        );
        settings.insert(
            FeatureType::TopSolidInfill,
            AccelerationControl {
                accel: 2500,
                accel_to_decel: 1750,
                scv: 5,
            },
        );
        settings.insert(
            FeatureType::SolidInfill,
            AccelerationControl {
                accel: 4000,
                accel_to_decel: 2000,
                scv: 5,
            },
        );
        settings.insert(
            FeatureType::InternalInfill,
            AccelerationControl {
                accel: 6000,
                accel_to_decel: 3000,
                scv: 5,
            },
        );
        settings.insert(
            FeatureType::InternalBridgeInfill,
            AccelerationControl {
                accel: 4000,
                accel_to_decel: 2000,
                scv: 5,
            },
        );
        settings.insert(
            FeatureType::ThinWall,
            AccelerationControl {
                accel: 2000,
                accel_to_decel: 1000,
                scv: 5,
            },
        );
        settings.insert(
            FeatureType::GapFill,
            AccelerationControl {
                accel: 2000,
                accel_to_decel: 1000,
                scv: 5,
            },
        );
        settings.insert(
            FeatureType::Skirt,
            AccelerationControl {
                accel: 4000,
                accel_to_decel: 2000,
                scv: 8,
            },
        );
        settings.insert(
            FeatureType::SupportMaterial,
            AccelerationControl {
                accel: 6000,
                accel_to_decel: 3000,
                scv: 8,
            },
        );
        settings.insert(
            FeatureType::SupportMaterialInterface,
            AccelerationControl {
                accel: 6000,
                accel_to_decel: 3000,
                scv: 8,
            },
        );

        settings
    });
}
